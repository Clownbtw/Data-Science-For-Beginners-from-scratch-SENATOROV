"""Ответы на квизы."""

# 11/08/25
#
# Список вопросов к видео https://youtu.be/hW_7hodGxVU?si=tCEVs00xGt2q61eW (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию) В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять , что домашка пришла?
# 2) Как принять  домашку?
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# 4) Что такое файл лога?
# 4.1) Когда нужно его пушить?
# 5) Что такое интерпритатор?
# 6) Где можно выбрать интерпритатор?
# 7) Что такое модуль ?
# 8) Как создать и отправить коммит?
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# 11) Как узнать какой именно линтер не прошёл проверку?
# 12) Линтер Pylint видит markdown?
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# 14) Где посмотреть номер ячейки в vscode?
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# 16) Где посмотреть в какой ячейке ошибка?
# 17) Как запустить терминал ?
# 18) Что такое линтер ?
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# 21) С какой  git команды начинается утро программиста?
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# 23) Что такое stash?
#   Общее объяснение концепции.
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#
#   Кнопка в vs code:
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает
#
# 24) Где посмотреть что есть конфликт в файлах?
# 24.1) Когда он появляется?
# 25) Как решить конфликт в файлах?
# 26) Напишиие правильное утверждение
# -Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# 29) Что делает кнопка complete merge?
# 30) В какой чат нужно писать если остались вопросы?
# 31) Что такое FORK? Зачем его делают?
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# 34) Как создать файл в vs code?
# 35) Файл лога нужно заполнять в конце каждого урока?
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# 3) Почему расширение py лучше чем ipynb?
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# 4.1) линтеры проверяют на соблюдение pep8?
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# 4.4) Зачем и где мы используем андерскор _
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
#

# 1) 0:11 - 0:18 В чате Homework сообщение с ником и написано прими пул
# 2) 0:20 - 0:47  Зайти в Github desktop, нажать на кнопку рядоом с веткой main, заходим в history и самый первый коммит
# 3) 0:35 - 0:40 В этой кнопке можно посмотреть историю коммитов, может есть что-то интересное
# 3.1) Ссылку брать из репозитория на вкалдке Commits, и скопироватьь URL нужного коммита
# 4) 1:56 - 2:10 Файл лога нужен для логирования уроков , записывать туда что сделал и т.п.
# 4.1) В конце каждого урока
# 5) 2:46 - 2:51 программа которая читает и запускает код
# 6) 2:43  -  2:46 Нажимаем на запуск ячейки, потом в  окне выбираем интерпретатор(или над ячейкой можно нажать и откроется такое же окно с выбором)
# 7) Модуль - это инструменты для решения задач по DS
# 8) 3:12 - 3:40 Заходим в github desktop, во вкалдке changes будут наши файлы в формате json, пишем название коммита и нажимаем commit to main потом  push origin
# 9) 3:46 - 3:50  В history нужно будет найти наш коммит
# 10) 5:00 - 5:08  Нужно нажать на commit to main и если ошибки в коде то у нас вылетет окно с ошибкой Error и будет написано failed там где произошла ошибка
# 10.1) - flake8 - проверка стиля/ошибок; игнорируется ряд правил, 
# - pylint - анализирует качества кода, mypy: статистическая проверка, 
# - pydocstyle - проверяет стиль  документации
# 11) 6:08 - 6:21 Если в терминале на против линтера горит красным Failed
# 12) Нет , не видит
# 13) 6:54 - 7:09 Номера в ячейках могут отличаться в том случае, если в vscode ячейка стоит после markdown
# 14) в Vscode внизу справо
# 15) 3:20 - 3:25 В формате json так как ipynb отображается в формате json
# 16) 5:36 - 5:40 В окне  Error  будет укзана ячейка cell_1
# 17) 5:54 - 5:59 Сверху есть кнопка Terminal -> New Terminal
# 18) 6:14 - 6:18 Линтер программ которая проверяет файл на корректность
# 19) 8:00 - 8:22 На сайте pylint надо вбить ошибку
# 20) 10:04 - 10:16 Убираются ошибки автоматичсеки когда мы закрыли все ошибки в линтере pylint
# 21) 9:25 - 9:29 Описание модуля - это какая информация у нас в модуле
# 22) 14:15 - 14:26 Нажимаем в левом верхем углу на Current repository, нажимае правой кнопкой мыши, и там будет кнопка open in vscode
# 23) Стэш это буфер куда мы временно прячем файлы, чтобы принять pull
# 23.1) git stash save "NAME_STASH"
# 23.2) git stash apply "NUMBER_STASH"
# 23.3) Стэш - временное сохранение изменений(буфер) нужен чтобы отложить текущую задачу, коммит - сохранение изменений в репозитории эти изменения становятся частью истории проекта. Коммитить лучше когда завершена какая-то работа и мы хотим внести эти изменения в проект, сохранить изменения в стэше лучше когда нужно переключиться на другую задачу, не измения истроию проекта
# 23.4) git stash list: show all the stashes
# 23.5) git stash drop, git stash
# 23.6) Нужно срочно перерключиться на другую ветку main, чтобы исправить баг. Работа над несколькими задачами паралельно и нужно переключиться с одной на другую, сохранаяя контекст в текущей
# 24) 16:13 - 16:21 После восстановления файлов напротив имя файла появиться восклицательный знак
# 24.1) 16:00 - 16:13 Когда мы нажимаем Restore, то гитхаб не понимает какие изменения сохранились те который пришли из интеренета или локально(все это происходит если двое людей работают в одном файле)
# 25) 16:25 - 17:05 В файле открытом у нас будет текст выделенный либо зеленым, либо синим цветом, решить данный конфилкт можно нажатием на кнопку Accept Current Changes тогда примится текст выделенный зеленым(то что пришло с интернета), можно нажать кнопку Accept Incoming Changes тогда примится локальное изменения на ПК,но изменения с гитхаба(зеленый текст) не примутся, или нажать на кнопку Accept Both Changes тогда примутся все изменения, или руками устранить
# 26) Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения. Правильно - Зелёное то что пришло с гитхаба и синее локальные изменения
# 27) Да
# 28) 4 способа: 1) Нажать на Accept Current Changes 2) Нажать Accept Incoming Changes 3) Нажать на Accept Both Changes 4) Убрать изменения руками
# 29) 17:40 - 17:42 Эта кнопка подтвержедения того что мы убрали в изменениях, а что оставили
# 30) 18:30 - 18:32 Нужно писать в чат Help Me
# 31) 19:02 - 19:16 Нужно чтобы скопировать чужой репозиторий и сделать его личным. Чтобы делать там все что мы хотим
# 32) 19:25 - 19:54 Нужно зайти в Github desktop, слева нажать на current repository -> Add -> Выбираем нужный репозиторий из списка -> Clone
# 33) C высокой верятностью ошибки уже решены, их решили либо коллеги, либо преподаватель
# 34) Слева сверху нажать на кнопку File(Файл) -> Cоздать файл
# 35) 1:08 - 1:16 Да
# ==================
#
# Дополнительные вопросы:
# 1) jupyter nbconvert --to script (название нашего файла).ipynb
# 2) Пакетный менеджер - инструмент, который помогает устанавливать или обновлять библиотеки, удалять пакеты. И тем и тем. Для DS лучше использовать conda
# 3) py лучше чем ipynb из-за того, что  ipynb конвертируется в json в github desktop, а py - обычный файл текстовый, py быстрее чем ipynb
# 4) Pep8 - это руководство по стилю кода на Питоне
# 4.1) Да, линетры проверяют соблюдается ли PEP8
# 4.2) Змеиный регистр - snake_case(UPPER_SNAKE_CASE), верблююжий регистр - camelCase, схема Pasca - PascalCase
# 4.3) Технически - да, переменная может состоять из одной буквы или "_"
# 4.4) Мы можем его использовать в схеме регистра имен - Змеиный регистр(snake_case, с префиксами(is_have), можем использовать в циклах for, также можем использоват в качестве имени переменной
# 4.5) Нет, не допустимы, за исключением циклов, когда буква i или j используется в циклах for для перебора или использование x и y для декартовых координат

# 15/08/25
#
# Список вопросов к видео https://youtu.be/Si9MfV8uJ-0?si=JXHe-tsgOEwSTI5E (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# 2. Как настроить перенос строки?
# 3. Сколько символов по pep8 разрешено на строке?
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# 8. Как вставить картинку в маркдаун?
# 9. Где посмотреть длину строки в vs code?
# 10. Как поменять тип ячейки с питона на маркдаун?
# 11. Как запустить сразу все ячейки в юпитере?
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# 16. Как очистить вывод ячеек которые уже запущены?
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# 18. Каким сочетанием убирается левый сайдбар?
# 19. Кнопка два листочка это наши локальные файлы?
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# 22. Что такое валидация?
# 23. Что такое трассировка ошибки?
# 24. Что значит отвалился интерпритатор?
#
# Отвечаете на вопросы в вашем редакторе кода.
#

# 1) 0:10 - 0:13 Слева сверху нажимаем File -> AutoSave
# 2) 0:15 - 0:42 Слева сверху нажимаем File -> Preferences -> Settings, пишем в строке wrap, справа нажимаем на off и выставляем wordWrapcolumn и ниже ставим 79 символов
# 3) 0:22 - 0:25 не больше 79 символов на строку
# 4) В видео показаны способы:
# 4.6(2:07 - 2:40, 4:10-4:22)
# 5) 4:32 - 4:50 От кнопки Terminal слева в самом начале
# 6) 6:20 - 6:46  Слева кнопка,где три кружочка туда надо нажать и там будет кнопка commits, там и можно отдавать коммиты или принимать, в меню где мы отдаем коммиты, чтобы принять д/з нужно нажать на три точки и кнопка pull
# 7) 7:10 - 7:33 Git - это контроль версий, да он локальный, можно посмотреть историю файлов и вернуться к коммиту любому
# 8) 7:55 - 8:03 Просто нужно скопировать картинку и вставить в ячейку
# 9) 1:10 - 1:25 Нужно выделить нужную нам строку и снизу будет показана длина строки(пример: Ln 1, Col 1(72 selected))
# 10) 7:41 - 7:47 Справо снизу у ячейки нужно нажать на python и в окне выбрать markdown
# 11) 8:27 - 8:30 Сверху возле кнопки "+Code" нужно нажать на кнопку Run All
# 12) 8:08 - 8:22 Нужно картинку вставить в тег img. Весь HTML - нет, нужно только выучить как работать с тегом img
# 13) 8:38 - 8:44 Shift+Enter
# 14) 8:57 - 9:18 В ячейке справо нужно нажать на три точки и нажать на кнопку Show Cell Lines Numbers
# 15) 9:39 - 9:50 Кнопка чтобы переместитьтся к ячейке, где произошла ошибка. Чтобы перейти на ошибочную ячейку нужно нажать на кнопку Go To
# 16) 10:42 - 10:51 Нужно сверху нажать на кнопку Clear All Outputs
# 17) Чтобы работать одновременно в нескольких файлах, нужно нажать справо сверху на кнопку "Split Editor". Split - это разделение(возможность) работать в нескольких файлах одновременно
# 18) Ctlr+B
# 19) Да
# 20) 9:24 - 9:30 Появилась ошибка DICT
# 21) Да, просмотрел и ознакомился
# 22) 9:50 - 9:54 Проверка на то как написан код
# 23) 10:00 - 10:08 Визуал ошибки(текст что как неправильно)
# 24) 10:22 - 10:27 Место, где появилась ошибка
#

#

#
